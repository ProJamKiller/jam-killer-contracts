"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[522],{12204:(t,e,r)=>{r.d(e,{C:()=>p,G:()=>h,a:()=>l,b:()=>d,d:()=>c,h:()=>i});var a=r(27454),s=r(79195),o=r(65579),n=r(63261);function c(t,e){return(0,a.ai)(t.abi,e,t.extensions)}function i(t,e){return t in e.readContract.functions}class p{featureName=a.cJ.name;constructor(t,e,r){this.contractWrapper=t,this.schema=e,this.storage=r}parseOutputMetadata(t){return this.schema.output.parseAsync(t)}parseInputMetadata(t){return this.schema.input.parseAsync(t)}async get(){let t;if(this.supportsContractMetadata(this.contractWrapper)){let e=await this.contractWrapper.read("contractURI",[]);e&&e.includes("://")&&(t=await this.storage.downloadJSON(e))}if(!t)try{let e,r,s;try{i("name",this.contractWrapper)&&(e=await this.contractWrapper.read("name",[]))}catch(t){}try{i("symbol",this.contractWrapper)&&(r=await this.contractWrapper.read("symbol",[]))}catch(t){}try{s=await (0,a.K)(this.contractWrapper.address,this.contractWrapper.getProvider(),this.storage,this.contractWrapper.options)}catch(t){}t={name:e||s?.name,symbol:r,description:s?.info.title}}catch(t){throw Error("Could not fetch contract metadata")}return this.parseOutputMetadata(t)}set=(0,s.f)(async t=>{let e=await this._parseAndUploadMetadata(t),r=this.contractWrapper;if(this.supportsContractMetadata(r))return s.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setContractURI",args:[e],parse:t=>({receipt:t,data:this.get})});throw new a.x(a.cJ)});update=(0,s.f)(async t=>await this.set.prepare({...await this.get(),...t}));async _parseAndUploadMetadata(t){let e=await this.parseInputMetadata(t);return this.storage.upload(e)}supportsContractMetadata(t){return c(t,"ContractMetadata")}}class l{constructor(t){this.contractWrapper=t}addTransactionListener(t){this.contractWrapper.addListener(a.aZ.Transaction,t)}removeTransactionListener(t){this.contractWrapper.off(a.aZ.Transaction,t)}addEventListener(t,e){let r=this.contractWrapper.readContract.interface.getEvent(t),a={address:this.contractWrapper.address,topics:[this.contractWrapper.readContract.interface.getEventTopic(r)]},s=t=>{let r=this.contractWrapper.readContract.interface.parseLog(t);e(this.toContractEvent(r.eventFragment,r.args,t))};return this.contractWrapper.getProvider().on(a,s),()=>{this.contractWrapper.getProvider().off(a,s)}}listenToAllEvents(t){let e={address:this.contractWrapper.address},r=e=>{try{let r=this.contractWrapper.readContract.interface.parseLog(e);t(this.toContractEvent(r.eventFragment,r.args,e))}catch(t){console.error("Could not parse event:",e,t)}};return this.contractWrapper.getProvider().on(e,r),()=>{this.contractWrapper.getProvider().off(e,r)}}removeEventListener(t,e){let r=this.contractWrapper.readContract.interface.getEvent(t);this.contractWrapper.readContract.off(r.name,e)}removeAllListeners(){this.contractWrapper.readContract.removeAllListeners();let t=this.contractWrapper.address;this.contractWrapper.getProvider().removeAllListeners({address:t})}async getAllEvents(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{fromBlock:0,toBlock:"latest",order:"desc"},e=(await this.contractWrapper.readContract.queryFilter({},t.fromBlock,t.toBlock)).sort((e,r)=>"desc"===t.order?r.blockNumber-e.blockNumber:e.blockNumber-r.blockNumber);return this.parseEvents(e)}async getEvents(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{fromBlock:0,toBlock:"latest",order:"desc"},r=this.contractWrapper.readContract.interface.getEvent(t),a=e.filters?r.inputs.map(t=>e.filters[t.name]):[],s=this.contractWrapper.readContract.filters[r.name](...a),o=(await this.contractWrapper.readContract.queryFilter(s,e.fromBlock,e.toBlock)).sort((t,r)=>"desc"===e.order?r.blockNumber-t.blockNumber:t.blockNumber-r.blockNumber);return this.parseEvents(o)}parseEvents(t){return t.map(t=>{let e=Object.fromEntries(Object.entries(t).filter(t=>"function"!=typeof t[1]&&"args"!==t[0]));if(t.args){let r=Object.entries(t.args),a=r.slice(r.length/2,r.length),s={};for(let[t,e]of a)s[t]=e;return{eventName:t.event||"",data:s,transaction:e}}return{eventName:t.event||"",data:{},transaction:e}})}toContractEvent(t,e,r){let a=Object.fromEntries(Object.entries(r).filter(t=>"function"!=typeof t[1]&&"args"!==t[0])),s={};return t.inputs.forEach((t,r)=>{if(Array.isArray(e[r])){let a=t.components;if(a){let o=e[r];if("tuple[]"===t.type){let e=[];for(let t=0;t<o.length;t++){let r=o[t],s={};for(let t=0;t<a.length;t++)s[a[t].name]=r[t];e.push(s)}s[t.name]=e}else{let e={};for(let t=0;t<a.length;t++)e[a[t].name]=o[t];s[t.name]=e}}}else s[t.name]=e[r]}),{eventName:t.name,data:s,transaction:a}}}class h{constructor(t){this.contractWrapper=t}async gasCostOf(t,e){var r;return r=await (0,s.c)(this.contractWrapper.getProvider(),await this.contractWrapper.populateTransaction(t,e)),o.formatEther(r)}async gasLimitOf(t,e){return this.contractWrapper.estimateGas(t,e)}async currentGasPriceInGwei(){let t=await this.contractWrapper.getProvider().getGasPrice();return o.formatUnits(t,"gwei")}}class d{featureName=a.cK.name;constructor(t,e,r){this.contractWrapper=t,this.metadata=e,this.storage=r}async get(){return c(this.contractWrapper,"AppURI")?await this.contractWrapper.read("appURI",[]):(0,n.Rz)((await this.metadata.get()).app_uri||"",this.storage.getGatewayUrls())}set=(0,s.f)(async t=>c(this.contractWrapper,"AppURI")?s.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"setAppURI",args:[t]}):await this.metadata.update.prepare({app_uri:t}))}},20522:(t,e,r)=>{r.d(e,{C:()=>i});var a=r(11561),s=r(27454),o=r(12204),n=r(79195),c=r(95848);class i{featureName=s.d4.name;constructor(t,e){this.contractWrapper=t,this.roles=e}async getAll(){(0,a.A)(this.roles.length,"this contract has no support for roles");let t={},e=Object.entries(this.roles);return(await Promise.all(e.map(t=>{let[,e]=t;return this.get(e)}))).forEach((r,a)=>t[e[a][1]]=r),t}async get(t){(0,a.A)(this.roles.includes(t),`this contract does not support the "${t}" role`);let e=this.contractWrapper;if((0,o.h)("getRoleMemberCount",e)&&(0,o.h)("getRoleMember",e)){let r=(0,s.H)(t),a=(await e.read("getRoleMemberCount",[r])).toNumber();return await Promise.all(Array.from(Array(a).keys()).map(t=>e.read("getRoleMember",[r,t])))}throw Error("Contract does not support enumerating roles. Please implement IPermissionsEnumerable to unlock this functionality.")}setAll=(0,n.f)(async(t,e)=>{let r=e||await this.contractWrapper.getSignerAddress(),o=new c.C(this.contractWrapper),i=Object.keys(t);(0,a.A)(i.length,"you must provide at least one role to set"),(0,a.A)(i.every(t=>this.roles.includes(t)),"this contract does not support the given role");let p=await this.getAll(),l=[],h=i.sort(t=>"admin"===t?1:-1);for(let e=0;e<h.length;e++){let a=h[e],[n,c]=await Promise.all([Promise.all(t[a]?.map(t=>s.aL(t))||[]),Promise.all(p[a]?.map(t=>s.aL(t))||[])]),i=n.filter(t=>!c.includes(t)),d=c.filter(t=>!n.includes(t));if(d.length>1){let t=d.indexOf(r);t>-1&&(d.splice(t,1),d.push(r))}i.length&&i.forEach(t=>{l.push(o.encode("grantRole",[(0,s.H)(a),t]))}),d.length&&(await Promise.all(d.map(t=>this.getRevokeRoleFunctionName(t)))).forEach((t,e)=>l.push(o.encode(t,[(0,s.H)(a),d[e]])))}return n.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[l]})});async verify(t,e){await Promise.all(t.map(async t=>{let[r,a]=await Promise.all([this.get(t),(0,s.aL)(e)]);if(!r.map(t=>t.toLowerCase()).includes(a.toLowerCase()))throw new s.o(a,t)}))}grant=(0,n.f)(async(t,e)=>{(0,a.A)(this.roles.includes(t),`this contract does not support the "${t}" role`);let r=await (0,s.aL)(e);return n.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"grantRole",args:[(0,s.H)(t),r]})});revoke=(0,n.f)(async(t,e)=>{(0,a.A)(this.roles.includes(t),`this contract does not support the "${t}" role`);let r=await (0,s.aL)(e),o=await this.getRevokeRoleFunctionName(r);return n.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:o,args:[(0,s.H)(t),r]})});async getRevokeRoleFunctionName(t){let[e,r]=await Promise.all([(0,s.aL)(t),this.contractWrapper.getSignerAddress()]);return r.toLowerCase()===e.toLowerCase()?"renounceRole":"revokeRole"}}}}]);