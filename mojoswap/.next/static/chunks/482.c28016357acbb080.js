"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[482],{33171:(t,e,r)=>{r.d(e,{S:()=>s});var a=r(79195),n=r(21518);class s{get chainId(){return this._chainId}constructor(t,e,r){this.contractWrapper=t,this.storage=e,this.erc1155=new n.E(this.contractWrapper,this.storage,r),this._chainId=r}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(t){return this.erc1155.get(t)}async totalSupply(t){return this.erc1155.totalSupply(t)}async balanceOf(t,e){return this.erc1155.balanceOf(t,e)}async balance(t){return this.erc1155.balance(t)}async isApproved(t,e){return this.erc1155.isApproved(t,e)}transfer=(0,a.f)((()=>{var t=this;return async function(e,r,a){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[0];return t.erc1155.transfer.prepare(e,r,a,n)}})());transferBatch=(0,a.f)((()=>{var t=this;return async function(e,r,a,n){let s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[0];return t.erc1155.transferBatch.prepare(e,r,a,n,s)}})());setApprovalForAll=(0,a.f)(async(t,e)=>this.erc1155.setApprovalForAll.prepare(t,e));airdrop=(0,a.f)((()=>{var t=this;return async function(e,r,a){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[0];return t.erc1155.airdrop.prepare(e,r,a,n)}})())}},79271:(t,e,r)=>{r.d(e,{h:()=>n});var a=r(27454);async function n(t,e,n){let s=t.getProvider(),o=(await Promise.resolve().then(r.t.bind(r,96337,19))).default,i=new a.cs(s,e,o,{},t.storage),c=await t.getSignerAddress(),d=t.address;return(await i.read("allowance",[c,d])).gte(n)}},41862:(t,e,r)=>{r.d(e,{a:()=>h,g:()=>g,h:()=>p,i:()=>d,m:()=>u,v:()=>l});var a=r(86863),n=r(37457),s=r(11561),o=r(7471),i=r(27454),c=r(95848);async function d(t,e,n,s,i){try{let c=(await r.e(4811).then(r.t.bind(r,94811,19))).default,d=new a.NZ(n,c,t),[p,l]=await Promise.all([d.supportsInterface(o.I),d.supportsInterface(o.a)]);if(p){let o;let c=(await Promise.resolve().then(r.t.bind(r,57305,19))).default,d=new a.NZ(n,c,t);if(await d.isApprovedForAll(i,e))return!0;try{o=await d.getApproved(s)}catch(t){}return o?.toLowerCase()===e.toLowerCase()}if(!l)return console.error("Contract does not implement ERC 1155 or ERC 721."),!1;{let s=(await Promise.resolve().then(r.t.bind(r,59355,19))).default,o=new a.NZ(n,s,t);return await o.isApprovedForAll(i,e)}}catch(t){return console.error("Failed to check if token is approved",t),!1}}async function p(t,e,a,n,s){let c=(await r.e(4811).then(r.t.bind(r,94811,19))).default,d=new i.cs(t.getSignerOrProvider(),a,c,t.options,t.storage),[p,l]=await Promise.all([d.read("supportsInterface",[o.I]),d.read("supportsInterface",[o.a])]);if(p){let o=(await Promise.resolve().then(r.t.bind(r,57305,19))).default,c=new i.cs(t.getSignerOrProvider(),a,o,t.options,t.storage);await c.read("isApprovedForAll",[s,e])||(await c.read("getApproved",[n])).toLowerCase()===e.toLowerCase()||await c.sendTransaction("setApprovalForAll",[e,!0])}else if(l){let n=(await Promise.resolve().then(r.t.bind(r,59355,19))).default,o=new i.cs(t.getSignerOrProvider(),a,n,t.options,t.storage);await o.read("isApprovedForAll",[s,e])||await o.sendTransaction("setApprovalForAll",[e,!0])}else throw Error("Contract must implement ERC 1155 or ERC 721.")}function l(t){(0,s.A)(void 0!==t.assetContractAddress&&null!==t.assetContractAddress,"Asset contract address is required"),(0,s.A)(void 0!==t.buyoutPricePerToken&&null!==t.buyoutPricePerToken,"Buyout price is required"),(0,s.A)(void 0!==t.listingDurationInSeconds&&null!==t.listingDurationInSeconds,"Listing duration is required"),(0,s.A)(void 0!==t.startTimestamp&&null!==t.startTimestamp,"Start time is required"),(0,s.A)(void 0!==t.tokenId&&null!==t.tokenId,"Token ID is required"),(0,s.A)(void 0!==t.quantity&&null!==t.quantity,"Quantity is required"),"NewAuctionListing"===t.type&&(0,s.A)(void 0!==t.reservePricePerToken&&null!==t.reservePricePerToken,"Reserve price is required")}async function u(t,e,r){return{quantity:r.quantityDesired,pricePerToken:r.pricePerToken,currencyContractAddress:r.currency,buyerAddress:r.offeror,quantityDesired:r.quantityWanted,currencyValue:await (0,c.a)(t,r.currency,r.quantityWanted.mul(r.pricePerToken)),listingId:e}}function h(t,e,r){return r=n.gH.from(r),t=n.gH.from(t),e=n.gH.from(e),!t.eq(n.gH.from(0))&&e.sub(t).mul(i.dE).div(t).gte(r)}async function g(t,e,r){let a=[];for(;e-t>o.D;)a.push(r(t,t+o.D-1)),t+=o.D;return a.push(r(t,e-1)),await Promise.all(a)}},50482:(t,e,r)=>{r.r(e),r.d(e,{Pack:()=>F});var a=r(37457),n=r(65579),s=r(48892),o=r(95848),i=r(79271),c=r(29966),d=r(27454),p=r(21187),l=r(12204),u=r(41862),h=r(7471),g=r(79195),w=r(34590),f=r(66048),k=r(20522),v=r(33171),A=r(98467),y=r(55814),m=r(17152),P=r(14476);let W=P.z.object({contractAddress:d.b9}),C=W.extend({quantity:d.cw}),I=W.extend({tokenId:d.b6}),b=W.extend({tokenId:d.b6,quantity:d.b6}),R=C.omit({quantity:!0}).extend({quantityPerReward:d.cw}),S=b.omit({quantity:!0}).extend({quantityPerReward:d.b6}),T=R.extend({totalRewards:d.b6.default("1")}),q=S.extend({totalRewards:d.b6.default("1")}),E=P.z.object({erc20Rewards:P.z.array(T).default([]),erc721Rewards:P.z.array(I).default([]),erc1155Rewards:P.z.array(q).default([])}),L=E.extend({packMetadata:m.N,rewardsPerPack:d.b6.default("1"),openStartTime:p.R.default(new Date)});r(3802),r(16763),r(74486),r(32017);class O{featureName=d.dK.name;constructor(t,e,r,a,n){let s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:new d.cs(t,e,A,a,r);this.contractWrapper=s,this.storage=r,this.chainId=n,this.events=new l.a(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}open=(0,g.f)((()=>{var t=this;return async function(e){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5e5;return g.T.fromContractWrapper({contractWrapper:t.contractWrapper,method:"openPack",args:[e,r],overrides:{gasLimit:n},parse:e=>{let r=a.gH.from(0);try{r=t.contractWrapper.parseLogs("PackOpenRequested",e?.logs)[0].args.requestId}catch(t){}return{receipt:e,id:r}}})}})());claimRewards=(0,g.f)((()=>{var t=this;return async function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:5e5;return g.T.fromContractWrapper({contractWrapper:t.contractWrapper,method:"claimRewards",args:[],overrides:{gasLimit:e},parse:async e=>{let r=t.contractWrapper.parseLogs("PackOpened",e?.logs);if(0===r.length)throw Error("PackOpened event not found");let a=r[0].args.rewardUnitsDistributed;return await t.parseRewards(a)}})}})());async parseRewards(t){let e=[],r=[],a=[];for(let s of t)switch(s.tokenType){case 0:{let t=await (0,o.f)(this.contractWrapper.getProvider(),s.assetContract);e.push({contractAddress:s.assetContract,quantityPerReward:n.formatUnits(s.totalAmount,t.decimals).toString()});break}case 1:r.push({contractAddress:s.assetContract,tokenId:s.tokenId.toString()});break;case 2:a.push({contractAddress:s.assetContract,tokenId:s.tokenId.toString(),quantityPerReward:s.totalAmount.toString()})}return{erc20Rewards:e,erc721Rewards:r,erc1155Rewards:a}}async addPackOpenEventListener(t){return this.events.addEventListener("PackOpened",async e=>{t(e.data.packId.toString(),e.data.opener,await this.parseRewards(e.data.rewardUnitsDistributed))})}async canClaimRewards(t){let e=await (0,d.aL)(t||await this.contractWrapper.getSignerAddress());return await this.contractWrapper.read("canClaimRewards",[e])}async openAndClaim(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5e5,n=await this.contractWrapper.sendTransaction("openPackAndClaimRewards",[t,e,r],{gasLimit:a.gH.from(5e5)}),s=a.gH.from(0);try{s=this.contractWrapper.parseLogs("PackOpenRequested",n?.logs)[0].args.requestId}catch(t){}return{receipt:n,id:s}}async getLinkBalance(){let t=(await Promise.resolve().then(r.t.bind(r,96337,19))).default;return this.getLinkContract(t).balanceOf(this.contractWrapper.address)}async transferLink(t){let e=(await Promise.resolve().then(r.t.bind(r,96337,19))).default;await this.getLinkContract(e).transfer(this.contractWrapper.address,t)}getLinkContract(t){let e=d.aY[this.chainId];if(!e)throw Error(`No LINK token address found for chainId ${this.chainId}`);let r=new d.cs(this.contractWrapper.getSignerOrProvider(),e,t,this.contractWrapper.options,this.storage);return new y.E(r,this.storage,this.chainId)}}class F extends v.S{static contractRoles=d.dL;get vrf(){return(0,p.a)(this._vrf,d.dK)}constructor(t,e,r){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},n=arguments.length>4?arguments[4]:void 0,s=arguments.length>5?arguments[5]:void 0,i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:new d.cs(t,e,n,a.gasless&&"openzeppelin"in a.gasless?{...a,gasless:{...a.gasless,openzeppelin:{...a.gasless.openzeppelin,useEOAForwarder:!0}}}:a,r);super(i,r,s),this.abi=d.bj.parse(n||[]),this.metadata=new l.C(this.contractWrapper,d.c3,this.storage),this.app=new l.b(this.contractWrapper,this.metadata,this.storage),this.roles=new k.C(this.contractWrapper,F.contractRoles),this.royalties=new f.C(this.contractWrapper,this.metadata),this.encoder=new o.C(this.contractWrapper),this.estimator=new l.G(this.contractWrapper),this.events=new l.a(this.contractWrapper),this.interceptor=new w.C(this.contractWrapper),this.owner=new f.a(this.contractWrapper),this._vrf=this.detectVrf()}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t),this._vrf?.onNetworkUpdated(t)}getAddress(){return this.contractWrapper.address}async get(t){return this.erc1155.get(t)}async getAll(t){return this.erc1155.getAll(t)}async getOwned(t){return this.erc1155.getOwned(t)}async getTotalCount(){return this.erc1155.totalCount()}async isTransferRestricted(){return!await this.contractWrapper.read("hasRole",[(0,d.H)("transfer"),s.L])}async getPackContents(t){let{contents:e,perUnitAmounts:r}=await this.contractWrapper.read("getPackContents",[t]),s=[],i=[],c=[];for(let t=0;t<e.length;t++){let d=e[t],p=r[t];switch(d.tokenType){case 0:{let t=await (0,o.f)(this.contractWrapper.getProvider(),d.assetContract),e=n.formatUnits(p,t.decimals),r=n.formatUnits(a.gH.from(d.totalAmount).div(p),t.decimals);s.push({contractAddress:d.assetContract,quantityPerReward:e,totalRewards:r});break}case 1:i.push({contractAddress:d.assetContract,tokenId:d.tokenId.toString()});break;case 2:c.push({contractAddress:d.assetContract,tokenId:d.tokenId.toString(),quantityPerReward:p.toString(),totalRewards:a.gH.from(d.totalAmount).div(p).toString()})}}return{erc20Rewards:s,erc721Rewards:i,erc1155Rewards:c}}create=(0,g.f)(async t=>{let e=await this.contractWrapper.getSignerAddress();return this.createTo.prepare(e,t)});addPackContents=(0,g.f)(async(t,e)=>{let[r,a]=await Promise.all([this.contractWrapper.getSignerAddress(),E.parseAsync(e)]),{contents:n,numOfRewardUnits:s}=await this.toPackContentArgs(a);return g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"addPackContents",args:[t,n,s,r],parse:t=>{let e=this.contractWrapper.parseLogs("PackUpdated",t?.logs);if(0===e.length)throw Error("PackUpdated event not found");let r=e[0].args.packId;return{id:r,receipt:t,data:()=>this.erc1155.get(r)}}})});createTo=(0,g.f)(async(t,e)=>{let[r,a,n]=await Promise.all([(0,h.b)(e.packMetadata,this.storage),L.parseAsync(e),(0,d.aL)(t)]),{erc20Rewards:s,erc721Rewards:o,erc1155Rewards:i}=a,{contents:c,numOfRewardUnits:p}=await this.toPackContentArgs({erc20Rewards:s,erc721Rewards:o,erc1155Rewards:i});return g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"createPack",args:[c,p,r,a.openStartTime,a.rewardsPerPack,n],parse:t=>{let e=this.contractWrapper.parseLogs("PackCreated",t?.logs);if(0===e.length)throw Error("PackCreated event not found");let r=e[0].args.packId;return{id:r,receipt:t,data:()=>this.erc1155.get(r)}}})});open=(0,g.f)((()=>{var t=this;return async function(e){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:5e5;if(t._vrf)throw Error("This contract is using Chainlink VRF, use `contract.vrf.open()` or `contract.vrf.openAndClaim()` instead");return g.T.fromContractWrapper({contractWrapper:t.contractWrapper,method:"openPack",args:[e,r],overrides:{gasLimit:a},parse:async e=>{let r=t.contractWrapper.parseLogs("PackOpened",e?.logs);if(0===r.length)throw Error("PackOpened event not found");let a=r[0].args.rewardUnitsDistributed,s=[],i=[],c=[];for(let e of a)switch(e.tokenType){case 0:{let r=await (0,o.f)(t.contractWrapper.getProvider(),e.assetContract);s.push({contractAddress:e.assetContract,quantityPerReward:n.formatUnits(e.totalAmount,r.decimals).toString()});break}case 1:i.push({contractAddress:e.assetContract,tokenId:e.tokenId.toString()});break;case 2:c.push({contractAddress:e.assetContract,tokenId:e.tokenId.toString(),quantityPerReward:e.totalAmount.toString()})}return{erc20Rewards:s,erc721Rewards:i,erc1155Rewards:c}}})}})());async toPackContentArgs(t){let e=[],r=[],{erc20Rewards:n,erc721Rewards:s,erc1155Rewards:o}=t,d=this.contractWrapper.getProvider(),p=await this.contractWrapper.getSignerAddress();for(let t of n){let a=(await (0,c.n)(d,t.quantityPerReward,t.contractAddress)).mul(t.totalRewards);if(!await (0,i.h)(this.contractWrapper,t.contractAddress,a))throw Error(`ERC20 token with contract address "${t.contractAddress}" does not have enough allowance to transfer.

You can set allowance to the multiwrap contract to transfer these tokens by running:

await sdk.getToken("${t.contractAddress}").setAllowance("${this.getAddress()}", ${a});

`);r.push(t.totalRewards),e.push({assetContract:t.contractAddress,tokenType:0,totalAmount:a,tokenId:0})}for(let t of s){if(!await (0,u.i)(this.contractWrapper.getProvider(),this.getAddress(),t.contractAddress,t.tokenId,p))throw Error(`ERC721 token "${t.tokenId}" with contract address "${t.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getNFTCollection("${t.contractAddress}").setApprovalForToken("${this.getAddress()}", ${t.tokenId});

`);r.push("1"),e.push({assetContract:t.contractAddress,tokenType:1,totalAmount:1,tokenId:t.tokenId})}for(let t of o){if(!await (0,u.i)(this.contractWrapper.getProvider(),this.getAddress(),t.contractAddress,t.tokenId,p))throw Error(`ERC1155 token "${t.tokenId}" with contract address "${t.contractAddress}" is not approved for transfer.

You can give approval the multiwrap contract to transfer this token by running:

await sdk.getEdition("${t.contractAddress}").setApprovalForAll("${this.getAddress()}", true);

`);r.push(t.totalRewards),e.push({assetContract:t.contractAddress,tokenType:2,totalAmount:a.gH.from(t.quantityPerReward).mul(a.gH.from(t.totalRewards)),tokenId:t.tokenId})}return{contents:e,numOfRewardUnits:r}}async prepare(t,e,r){return g.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:e,overrides:r})}async call(t,e,r){return this.contractWrapper.call(t,e,r)}detectVrf(){if((0,l.d)(this.contractWrapper,"PackVRF"))return new O(this.contractWrapper.getSignerOrProvider(),this.contractWrapper.address,this.storage,this.contractWrapper.options,this.chainId)}}}}]);